<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<!-- mybatis的主配置文件 -->
<configuration>

    <properties resource="jdbcConfig.properties">

    </properties>

    <typeAliases>
        <!-- 配置别名，IUserDao.xml可直接使用user，不区分大小写 -->
        <typeAlias type="com.itheima.domain.User" alias="user"></typeAlias>

        <!--或-->

        <!--用于指定要配置别名的包，当指定后，该包下的实体类都会注册别名，且不区分大小写
        <package name="com.itheima.domain.User"></package>-->
    </typeAliases>

    <!-- 配置环境 -->
    <environments default="mysql">
        <!-- 配置mysql的环境-->
        <environment id="mysql">
            <!-- 配置事务的类型-->
            <transactionManager type="JDBC"></transactionManager>
            <!-- 配置数据源（连接池） -->
            <dataSource type="POOLED">

                <!--POOLED	 采用传统的javax.sql.DataSource规范中的连接池，mybatis中有针对规范的实现
                UNPOOLED 采用传统的获取连接的方式，虽然也实现Javax.sql.DataSource接口，但是并没有使用池的思想。
                JNDI	 采用服务器提供的JNDI技术实现，来获取DataSource对象，不同的服务器所能拿到DataSource是不一样。
                注意：如果不是web或者maven的war工程，是不能使用的。
                我们课程中使用的是tomcat服务器，采用连接池就是dbcp连接池。-->

                <!-- 配置连接数据库的4个基本信息 -->
                <property name="driver" value="${jdbc.driver}"/>
                <property name="url" value="${jdbc.url}?
                 useUnicode=true&amp;characterEncoding=utf8"/>
                <property name="username" value="${jdbc.username}"/>
                <property name="password" value="${jdbc.password}"/>
            </dataSource>
        </environment>
    </environments>

    <!-- 指定映射配置文件的位置，映射配置文件指的是每个dao独立的配置文件 -->
    <mappers>
        <!--<mapper resource="com/itheima/dao/IUserDao.xml"/>-->
        <!--或-->
        <package name="com.itheima.dao"></package>
    </mappers>
</configuration>